plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version '0.2.5-SNAPSHOT' apply false
	id 'net.minecrell.licenser' version '0.4.1'	
	id "org.ajoberstar.grgit" version "3.1.1"
	id 'com.matthewprenger.cursegradle' version "1.1.2"
}

def ENV = System.getenv()

class Globals {
	static def baseVersion = "0.3.0"
	static def mcVersion = "1.14.4"
	static def yarnVersion = "+build.1"
}

import org.apache.commons.codec.digest.DigestUtils
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + ".9999+nogit"
	}
	if(!System.getenv().BUILD_NUMBER){
		return version + ".9999+local"
	}
	def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)
	if (latestCommits.isEmpty()) {
		return version + ".0+uncommited"
	} else {
		def commitHash = latestCommits.get(0).id
		def buildGradleHash = DigestUtils.sha256Hex(file("build.gradle").text)
		return version + "." + getOrIncrementBuildNumber(project, commitHash + buildGradleHash)
	}
}

def getOrIncrementBuildNumber(project, hash) {
	def jsonSlurper = new JsonSlurper()
	def jsonFile = new File(project.gradle.gradleUserHomeDir, "fabric_build_numbers.json")
	def json = [:]
	if(jsonFile.exists()){
		json = jsonSlurper.parseText(jsonFile.text)
	}

	//Gets the project info from the main json
	def info = json[project.name]
	if(info == null){
		info = [:]
	}

	int buildNumber

	//If the hash exists, we returns its build number
	if(info[hash] != null){
		buildNumber = info[hash].build
	} else {
		//Not seen this version before, so we increment the build number by one based off all the recorded hashes, so multibranch should work just fine.
		buildNumber = info.size() + 1
		info[hash] = [
		    build: buildNumber
		]
	}

	//write out the updated json file
	json[project.name] = info
	jsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))

	return buildNumber
}

allprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'
	apply plugin: 'net.minecrell.licenser'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	group = "net.fabricmc.fabric-api"

	dependencies {
		minecraft "com.mojang:minecraft:$Globals.mcVersion"
		mappings "net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}"
		modCompile "net.fabricmc:fabric-loader:0.4.8+build.154"
	}

	configurations {
		dev
	}

	repositories {
		mavenLocal()
	}

	jar {
		classifier = "dev"
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			from(sourceSets.main.resources.srcDirs) {
				include "fabric.mod.json"
				expand "version": project.version
			}

			from(sourceSets.main.resources.srcDirs) {
				exclude "fabric.mod.json"
			}
		}

		license {
			header rootProject.file('HEADER')
			include '**/*.java'
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
}

subprojects {
	task remapMavenJar(type: Copy, dependsOn: remapJar) {
		afterEvaluate {
			from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
			into("${project.buildDir}/libs/")
			rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
					builtBy remapMavenJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		repositories {
			maven {
				url "http://mavenupload.modmuss50.me/"
				if (project.hasProperty('mavenPass')) {
					credentials {
						username 'buildslave'
						password project.getProperty('mavenPass')
					}
				}
			}
		}
	}

}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	afterEvaluate {
		input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}-maven.jar"
		addNestedDependencies = false
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
				builtBy remapMavenJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				subprojects.each {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}	
	}

	repositories {
		maven {
			url "http://mavenupload.modmuss50.me/"
			if (project.hasProperty('mavenPass')) {
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			}
		}
	}
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
	afterEvaluate {
		subprojects.each {
			compile project(path: ":${it.name}", configuration: "dev")
			include project("${it.name}:")
		}
	}
}

version = Globals.baseVersion + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

curseforge {
	if (project.hasProperty('curse_api_key')){
		apiKey = project.getProperty('curse_api_key')
	}
	project {
		id = '306612'
		changelog = 'A changelog can be found at https://github.com/FabricMC/fabric/commits/master'
		releaseType = 'alpha'
		addGameVersion '1.14-Snapshot'
		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[$Globals.mcVersion] Fabric API $Globals.baseVersion build $ENV.BUILD_NUMBER"
		}
		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
	options{
		forgeGradleIntegration = false
	}
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'
