buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.114'
	}
}

plugins {
	id "java-library"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "fabric-loom" version "0.8.12" apply false
	id "org.cadixdev.licenser" version "0.5.0"
	id "org.ajoberstar.grgit" version "3.1.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "1.1.0"
}

def ENV = System.getenv()

class Globals {
	static def baseVersion = "0.35.3"
	static def mcVersion = "1.17"
	static def yarnVersion = "+build.6"
	static def loaderVersion = "0.11.3"
	static def preRelease = false
}

version = Globals.baseVersion + "+" + (ENV.GITHUB_RUN_NUMBER ? "" : "local-") + getBranch()
logger.lifecycle("Building Fabric: " + version)

import org.apache.commons.codec.digest.DigestUtils

def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + "+nogit"
	}

	def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)

	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	}

	return version + "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(Globals.mcVersion).substring(0, 2)
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'dev') }
	project.dependencies {
		deps.each {
			api it
		}
	}
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

allprojects {
	apply plugin: "java-library"
	apply plugin: "checkstyle"
	apply plugin: "maven-publish"
	apply plugin: "fabric-loom"
	apply plugin: "org.cadixdev.licenser"

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 16
	}

	group = "net.fabricmc.fabric-api"

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	loom {
		runs {
			testmodClient {
				client()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Client"
				source sourceSets.testmod
			}
			testmodServer {
				server()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Server"
				source sourceSets.testmod
			}
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:$Globals.mcVersion"
		mappings "net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2"
		modApi "net.fabricmc:fabric-loader:${Globals.loaderVersion}"
	}

	configurations {
		dev
	}

	loom {
		shareCaches = true
	}

	repositories {
		mavenLocal()
	}

	jar {
		archiveClassifier = "dev"
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-$version-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-$version-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}

		license {
			header rootProject.file("HEADER")
			include "**/*.java"
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier = "sources"
		from sourceSets.main.allSource
	}

	checkstyle {
		configFile = rootProject.file("checkstyle.xml")
		toolVersion = "8.31"
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}
}

// Apply auxiliary buildscripts to submodules
// This must be done after all plugins are applied to subprojects
apply from: "gradle/module-validation.gradle"

javadoc {
	options {
		source = "8"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				"https://guava.dev/releases/21.0/api/docs/",
				"https://asm.ow2.io/javadoc/",
				"https://docs.oracle.com/javase/8/docs/api/",
				"http://jenkins.liteloader.com/job/Mixin/javadoc/",
				"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
				// Need to add minecraft jd publication etc once there is one available
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")
	}

	allprojects.each {
		source(it.sourceSets.main.allJava.srcDirs)
	}

	classpath = sourceSets.main.compileClasspath
	include("**/api/**")
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
	archiveClassifier = "fatjavadoc"
}

build.dependsOn javadocJar

// Runs a dedicated headless server with all test mods that closes once complete.
loom {
	runs {
		autoTestServer {
			inherit testmodServer
			vmArg "-Dfabric.autoTest"
		}
	}
}

subprojects {
	dependencies {
		testmodImplementation sourceSets.main.output
	}

	task remapMavenJar(type: Copy, dependsOn: remapJar) {
		afterEvaluate {
			from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
			into("${project.buildDir}/libs/")
			rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				afterEvaluate {
					artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
						builtBy remapMavenJar
					}

					artifact(sourcesJar) {
						builtBy remapSourcesJar
					}
				}
			}
		}

		setupRepositories(repositories)
	}

	javadoc.enabled = false
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	afterEvaluate {
		input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}-maven.jar"
		addNestedDependencies = false
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
				builtBy remapMavenJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifact javadocJar

			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				subprojects.each {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}

	setupRepositories(repositories)
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	if (ENV.MAVEN_URL) {
		repositories.maven {
			url ENV.MAVEN_URL
			credentials {
				username ENV.MAVEN_USERNAME
				password ENV.MAVEN_PASSWORD
			}
		}
	}
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

sourceSets {
	testmod
}

dependencies {
	afterEvaluate {
		subprojects.each {
			api project(path: ":${it.name}", configuration: "dev")
			include project("${it.name}:")

			testmodImplementation project("${it.name}:").sourceSets.testmod.output
		}
	}
}

curseforge {
	if (ENV.CURSEFORGE_API_KEY) {
		apiKey = ENV.CURSEFORGE_API_KEY
	}

	project {
		id = "306612"
		changelog = "A changelog can be found at https://github.com/FabricMC/fabric/commits"
		releaseType = Globals.preRelease ? "beta" : "release"
		addGameVersion "1.17"
		addGameVersion "Fabric"

		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[$Globals.mcVersion] Fabric API $Globals.baseVersion"
		}

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}

	options {
		forgeGradleIntegration = false
	}
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: remapMavenJar) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("[$Globals.mcVersion] Fabric API $Globals.baseVersion")
		releaseBuilder.body("A changelog can be found at https://github.com/FabricMC/fabric/commits")
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(Globals.preRelease)

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
	}
}

task modrinth(type: com.modrinth.minotaur.TaskModrinthUpload, dependsOn: remapMavenJar) {
	onlyIf {
		ENV.MODRINTH_TOKEN
	}

	token = ENV.MODRINTH_TOKEN
	projectId = "P7dR8mSH"
	versionNumber = version
	versionName = "[$Globals.mcVersion] Fabric API $Globals.baseVersion"
	releaseType = Globals.preRelease ? "beta" : "release"

	uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")

	addGameVersion(Globals.mcVersion)
	addLoader('fabric')
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

github.mustRunAfter checkVersion
modrinth.mustRunAfter checkVersion
publish.mustRunAfter checkVersion
project.tasks.curseforge.mustRunAfter checkVersion
