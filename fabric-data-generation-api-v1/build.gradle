archivesBaseName = "fabric-data-generation-api-v1"
version = getSubprojectVersion(project)

moduleDependencies(project, [
		'fabric-api-base',
		'fabric-registry-sync-v0',
		'fabric-networking-api-v1'
])

sourceSets {
	testmod {
		java {
			srcDirs += [
				'src/testmod/generated'
			]
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/fabric-data-generation-api-v1.accesswidener")

	runs {
		datagen {
			inherit testmodServer
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/testmod/generated")}"

			ideConfigGenerated = true
		}
	}
}

assemble.dependsOn runDatagen

import org.objectweb.asm.ClassReader
import org.objectweb.asm.Opcodes
import org.objectweb.asm.tree.ClassNode

import java.util.zip.ZipFile

task generateAccessWidener() {
	doLast {
		File inputJar = loom.mappingsProvider.mappedProvider.baseMappedJar
		String accessWidener = file("template.accesswidener").text + "\n"

		def recipesProvider = getClassNode(inputJar, "net/minecraft/data/server/RecipesProvider.class")
		recipesProvider.methods.forEach {
			if ((it.access & Opcodes.ACC_SYNTHETIC) != 0 || (it.access & Opcodes.ACC_PUBLIC) != 0)
				return

			if (it.name.startsWith("<") || it.name == "generate")
				return

			accessWidener += "transitive-accessible\tmethod\t${recipesProvider.name}\t${it.name}\t${it.desc}\n"
		}

		def blockStateModelGenerator = getClassNode(inputJar, "net/minecraft/data/client/model/BlockStateModelGenerator.class")
		blockStateModelGenerator.methods.forEach {
			if ((it.access & Opcodes.ACC_SYNTHETIC) != 0 || (it.access & Opcodes.ACC_PUBLIC) != 0)
				return

			if (it.name.startsWith("<") || it.desc == "()V")
				return

			accessWidener += "transitive-accessible\tmethod\t${blockStateModelGenerator.name}\t${it.name}\t${it.desc}\n"
		}


		file("src/main/resources/fabric-data-generation-api-v1.accesswidener").text = accessWidener
	}
}

ClassNode getClassNode(File input, String className) {
	File inputJar = loom.mappingsProvider.mappedProvider.baseMappedJar

	new ZipFile(inputJar).withCloseable { ZipFile zip  ->
		zip.getInputStream(zip.getEntry(className)).withCloseable { is ->
			ClassReader reader = new ClassReader(is)
			ClassNode classNode = new ClassNode()
			reader.accept(classNode, 0)

			return classNode
		}
	}
}
